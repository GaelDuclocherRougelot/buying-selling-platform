// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles Better-Auth
model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  username      String?   @unique
  displayUsername String?
  role          String    @default("user")
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Stripe Connect fields
  stripeAccountId String? @unique
  stripeAccountStatus String? @default("pending") // pending, active, restricted, disabled

  // Relations
  sessions      Session[]
  accounts      Account[]
  products      Product[]
  loginLogs     LoginLog[]
  favorites     Favorite[]

  @@map("user")
  PaymentBuyer Payment[] @relation("Buyer")
  PaymentSeller Payment[] @relation("Seller")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model LoginLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String   // "login", "logout", "failed_login", "password_reset"
  ipAddress   String?
  userAgent   String?
  location    String?  // Country/City if available
  success     Boolean  @default(true)
  failureReason String? // Reason for failed login
  createdAt   DateTime @default(now())

  @@map("login_logs")
}

model Account {
  id                     String    @id
  accountId              String
  providerId             String
  userId                 String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Modèles métier
model Category {
  id          String   @id @default(cuid())
  displayName String
  name        String   @unique
  imageUrl    String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  condition   String
  imagesUrl   String[]
  status      String  @default("pending")
  delivery    String  @default("pickup")
  deliveryPrice Float? @default(0)
  city        String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Add payments relation
  payments    Payment[]
  favorites   Favorite[]

  @@map("products")
}

model Payment {
  id            String   @id @default(cuid())
  stripePaymentIntentId String @unique
  amount        Float
  currency      String   @default("eur")
  status        String   @default("pending") // pending, pending_shipping_validation, succeeded, failed, canceled, refunded
  productId     String
  buyerId       String
  sellerId      String
  applicationFeeAmount Float? // Platform fee
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product  @relation(fields: [productId], references: [id])
  buyer         User     @relation("Buyer", fields: [buyerId], references: [id])
  seller        User     @relation("Seller", fields: [sellerId], references: [id])

  // Add shipment tracking relation
  shipmentTracking ShipmentTracking?
  shippingProof     ShippingProof?

  @@map("payments")
}

model ShipmentTracking {
  id                    String   @id @default(cuid())
  paymentId             String   @unique
  trackingNumber        String   // Numéro de suivi Colissimo
  carrier               String   @default("colissimo") // colissimo, chronopost, etc.
  status                String   @default("pending") // pending, shipped, delivered, failed
  lastEventCode         String?  // Code du dernier événement La Poste
  lastEventLabel        String?  // Libellé du dernier événement
  lastEventDate         DateTime?
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  timeline              Json?    // Timeline complète de La Poste
  events                Json?    // Événements détaillés
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  payment               Payment  @relation(fields: [paymentId], references: [id])

  @@map("shipment_tracking")
}

model ShippingProof {
  id          String   @id @default(cuid())
  paymentId   String   @unique
  proofType   String   // "receipt", "photo", "tracking_number"
  proofData   Json     // Données de la preuve (URL image, numéro, etc.)
  status      String   @default("pending_verification") // pending_verification, verified, rejected
  submittedAt DateTime @default(now())
  verifiedAt  DateTime?
  verifiedBy  String?  // ID de l'admin qui a vérifié
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payment     Payment  @relation(fields: [paymentId], references: [id])

  @@map("shipping_proof")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate favorites
  @@unique([userId, productId])
  @@map("favorites")
}