import { getUser } from "@/lib/auth-session";
import { prisma } from "@/lib/prisma";
import { stripe } from "@/lib/utils";
import { NextRequest, NextResponse } from "next/server";

export async function PUT(
	request: NextRequest,
	{ params }: { params: Promise<{ proofId: string }> }
) {
	try {
		const user = await getUser();

		if (!user) {
			return NextResponse.json(
				{ error: "Non autoris√©" },
				{ status: 401 }
			);
		}

		// V√©rifier que l'utilisateur est admin
		if (user.role !== "admin") {
			return NextResponse.json(
				{ error: "Acc√®s refus√©" },
				{ status: 403 }
			);
		}

		const { proofId } = await params;
		if (!proofId) {
			return NextResponse.json(
				{ error: "ID de preuve manquant" },
				{ status: 400 }
			);
		}
		const { status } = await request.json();

		if (!status || !["verified", "rejected"].includes(status)) {
			return NextResponse.json(
				{ error: "Statut invalide" },
				{ status: 400 }
			);
		}

		// Mettre √† jour la preuve d'exp√©dition
		const updatedProof = await prisma.shippingProof.update({
			where: {
				id: proofId,
			},
			data: {
				status: status,
				verifiedAt: new Date(),
				verifiedBy: user.id,
			},
			include: {
				payment: {
					include: {
						product: true,
						buyer: true,
						seller: true,
					},
				},
			},
		});

		// Si la preuve est valid√©e, capturer le paiement Stripe et transf√©rer au vendeur
		if (status === "verified") {
			try {
				// Capturer le paiement Stripe (transfert automatique au vendeur)
				const paymentIntent = await stripe.paymentIntents.capture(
					updatedProof.payment.stripePaymentIntentId
				);

				console.log(
					`‚úÖ Paiement captur√© et transf√©r√©: ${paymentIntent.id}`
				);
				console.log(
					`üí∞ Montant transf√©r√©: ${paymentIntent.amount / 100}‚Ç¨`
				);

				// Mettre √† jour le statut du paiement
				await prisma.payment.update({
					where: {
						id: updatedProof.paymentId,
					},
					data: {
						status: "succeeded",
						updatedAt: new Date(),
					},
				});

				// Mettre √† jour le statut du produit
				await prisma.product.update({
					where: {
						id: updatedProof.payment.productId,
					},
					data: {
						status: "sold",
					},
				});

				console.log(
					`‚úÖ Produit marqu√© comme vendu: ${updatedProof.payment.productId}`
				);
			} catch (stripeError) {
				console.error(
					"‚ùå Erreur lors de la capture Stripe:",
					stripeError
				);
				return NextResponse.json(
					{ error: "Erreur lors du transfert du paiement" },
					{ status: 500 }
				);
			}
		}

		// Si la preuve est rejet√©e, rembourser l'acheteur
		if (status === "rejected") {
			try {
				// Rembourser le paiement Stripe
				const refund = await stripe.refunds.create({
					payment_intent: updatedProof.payment.stripePaymentIntentId,
					reason: "requested_by_customer",
					metadata: {
						reason: "shipping_proof_rejected",
						proofId: proofId,
						verifiedBy: user.id,
					},
				});

				console.log(`üí∏ Remboursement effectu√©: ${refund.id}`);
				console.log(`üí∞ Montant rembours√©: ${refund.amount / 100}‚Ç¨`);

				// Mettre √† jour le statut du paiement
				await prisma.payment.update({
					where: {
						id: updatedProof.paymentId,
					},
					data: {
						status: "refunded",
						updatedAt: new Date(),
					},
				});

				console.log(`‚úÖ Paiement marqu√© comme rembours√©`);
			} catch (stripeError) {
				console.error(
					"‚ùå Erreur lors du remboursement Stripe:",
					stripeError
				);
				return NextResponse.json(
					{ error: "Erreur lors du remboursement" },
					{ status: 500 }
				);
			}
		}

		return NextResponse.json({
			message: `Preuve ${status === "verified" ? "valid√©e" : "rejet√©e"} avec succ√®s`,
			proof: updatedProof,
		});
	} catch (error) {
		console.error("Erreur lors de la v√©rification de la preuve:", error);
		return NextResponse.json(
			{ error: "Erreur interne du serveur" },
			{ status: 500 }
		);
	}
}

export async function POST(
	request: NextRequest,
	{ params }: { params: Promise<{ proofId: string }> }
) {
	try {
		const { proofId } = await params;
		const body = await request.json();
		const { action, adminId, status } = body; // Accepter les deux formats

		// D√©terminer l'action √† partir des param√®tres
		let finalAction = action;
		if (status === "verified") finalAction = "approve";
		if (status === "rejected") finalAction = "reject";

		if (!finalAction || !["approve", "reject"].includes(finalAction)) {
			return NextResponse.json(
				{
					error: "Action invalide. Utilisez 'approve'/'reject' ou 'verified'/'rejected'",
				},
				{ status: 400 }
			);
		}

		// R√©cup√©rer la preuve d'exp√©dition
		const shippingProof = await prisma.shippingProof.findUnique({
			where: { id: proofId },
			include: {
				payment: {
					include: {
						product: true,
						buyer: true,
						seller: true,
					},
				},
			},
		});

		if (!shippingProof) {
			return NextResponse.json(
				{ error: "Preuve d'exp√©dition non trouv√©e" },
				{ status: 404 }
			);
		}

		const payment = shippingProof.payment;

		if (finalAction === "approve") {
			// ‚úÖ APPROUVER - Capturer le paiement et transf√©rer au vendeur

			try {
				console.log(
					`üîç Validation de la preuve ${proofId} pour le paiement ${payment.id}`
				);

				// 1. V√©rifier le statut Stripe du PaymentIntent
				let paymentIntent;
				try {
					paymentIntent = await stripe.paymentIntents.retrieve(
						payment.stripePaymentIntentId
					);
					console.log(
						`üìä Statut Stripe du PaymentIntent: ${paymentIntent.status}`
					);
				} catch (stripeError) {
					console.error(
						"‚ùå Erreur lors de la r√©cup√©ration du PaymentIntent:",
						stripeError
					);
					return NextResponse.json(
						{
							error: `Erreur lors de la r√©cup√©ration du PaymentIntent: ${stripeError}`,
						},
						{ status: 500 }
					);
				}

				// 2. Capturer le paiement Stripe seulement s'il n'est pas d√©j√† captur√©
				if (paymentIntent.status === "requires_capture") {
					try {
						paymentIntent = await stripe.paymentIntents.capture(
							payment.stripePaymentIntentId
						);
						console.log(
							`‚úÖ Paiement Stripe captur√©: ${paymentIntent.id}`
						);
					} catch (captureError) {
						console.error(
							"‚ùå Erreur lors de la capture:",
							captureError
						);
						return NextResponse.json(
							{
								error: `Erreur lors de la capture du paiement: ${captureError}`,
							},
							{ status: 500 }
						);
					}
				} else if (paymentIntent.status === "succeeded") {
					console.log(
						`‚ÑπÔ∏è Paiement Stripe d√©j√† captur√©: ${paymentIntent.id}`
					);
				} else {
					console.log(
						`‚ö†Ô∏è Statut Stripe inattendu: ${paymentIntent.status}`
					);
				}

				// 3. Mettre √† jour le statut du paiement en base
				await prisma.payment.update({
					where: { id: payment.id },
					data: {
						status: "succeeded",
						updatedAt: new Date(),
					},
				});

				console.log(`‚úÖ Statut du paiement mis √† jour: succeeded`);

				// 4. Marquer le produit comme vendu
				await prisma.product.update({
					where: { id: payment.productId },
					data: { status: "sold" },
				});

				console.log(
					`‚úÖ Produit marqu√© comme vendu: ${payment.productId}`
				);

				// 5. Mettre √† jour la preuve d'exp√©dition
				await prisma.shippingProof.update({
					where: { id: proofId },
					data: {
						status: "verified",
						verifiedAt: new Date(),
						verifiedBy: adminId || "admin",
					},
				});

				console.log(`‚úÖ Preuve d'exp√©dition marqu√©e comme v√©rifi√©e`);

				return NextResponse.json({
					success: true,
					message: "Preuve approuv√©e - Paiement transf√©r√©",
				});
			} catch (stripeError) {
				console.error("‚ùå Erreur lors de la validation:", stripeError);
				return NextResponse.json(
					{
						error: `Erreur lors du transfert du paiement: ${stripeError}`,
					},
					{ status: 500 }
				);
			}
		} else if (finalAction === "reject") {
			// ‚ùå REJETER - Rembourser l'acheteur
			try {
				console.log(
					`üîç Rejet de la preuve ${proofId} pour le paiement ${payment.id}`
				);

				// 1. Rembourser le paiement
				const refund = await stripe.refunds.create({
					payment_intent: payment.stripePaymentIntentId,
					reason: "requested_by_customer",
				});

				console.log(`‚úÖ Remboursement effectu√©: ${refund.id}`);

				// 2. Mettre √† jour le statut du paiement
				await prisma.payment.update({
					where: { id: payment.id },
					data: {
						status: "refunded",
						updatedAt: new Date(),
					},
				});

				console.log(`‚úÖ Statut du paiement mis √† jour: refunded`);

				// 3. Remettre le produit en vente
				await prisma.product.update({
					where: { id: payment.productId },
					data: { status: "available" },
				});

				console.log(`‚úÖ Produit remis en vente: ${payment.productId}`);

				// 4. Mettre √† jour la preuve d'exp√©dition
				await prisma.shippingProof.update({
					where: { id: proofId },
					data: {
						status: "rejected",
						rejectedAt: new Date(),
						rejectedBy: adminId || "admin",
					},
				});

				console.log(`‚úÖ Preuve d'exp√©dition marqu√©e comme rejet√©e`);

				return NextResponse.json({
					success: true,
					message: "Preuve rejet√©e - Remboursement effectu√©",
				});
			} catch (stripeError) {
				console.error("‚ùå Erreur lors du rejet:", stripeError);
				return NextResponse.json(
					{ error: `Erreur lors du remboursement: ${stripeError}` },
					{ status: 500 }
				);
			}
		} else {
			return NextResponse.json(
				{ error: "Action invalide" },
				{ status: 400 }
			);
		}
	} catch (error) {
		console.error("‚ùå Erreur g√©n√©rale:", error);
		return NextResponse.json(
			{ error: `Erreur interne: ${error}` },
			{ status: 500 }
		);
	}
}
