import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function testCategoriesPage() {
	try {
		console.log("üß™ Test de la page des cat√©gories...");

		// 1. V√©rifier les cat√©gories existantes
		const categories = await prisma.category.findMany({
			select: {
				id: true,
				name: true,
				displayName: true,
				_count: {
					select: {
						products: true,
					},
				},
			},
			orderBy: {
				displayName: "asc",
			},
		});

		console.log(`üìä ${categories.length} cat√©gories trouv√©es:`);
		categories.forEach((category) => {
			console.log(
				`  - ${category.displayName} (${category.name}): ${category._count.products} produits`
			);
		});

		// 2. V√©rifier les cat√©gories avec des produits
		const categoriesWithProducts = categories.filter(
			(cat) => cat._count.products > 0
		);
		console.log(
			`\n‚úÖ ${categoriesWithProducts.length} cat√©gories avec des produits:`
		);
		categoriesWithProducts.forEach((category) => {
			console.log(
				`  - ${category.displayName}: ${category._count.products} produits`
			);
		});

		// 3. V√©rifier les cat√©gories vides
		const emptyCategories = categories.filter(
			(cat) => cat._count.products === 0
		);
		console.log(`\n‚ö†Ô∏è  ${emptyCategories.length} cat√©gories vides:`);
		emptyCategories.forEach((category) => {
			console.log(`  - ${category.displayName}`);
		});

		console.log("\n‚úÖ Test termin√© !");
		console.log("\nüìù URLs √† tester:");
		console.log("  - Page principale: /categories");
		categoriesWithProducts.forEach((category) => {
			console.log(
				`  - Cat√©gorie ${category.displayName}: /categories/${category.name}`
			);
		});
	} catch (error) {
		console.error("‚ùå Erreur lors du test:", error);
	} finally {
		await prisma.$disconnect();
	}
}

// Ex√©cuter le script
testCategoriesPage();
